# -*- coding: utf-8 -*-
"""
Created on Mon Jun  4 11:31:17 2018

@author: zoey
"""

import time
start = time.time()

import numpy
import pandas
import keras
from keras import models
from keras import layers
from keras.models import Sequential
from keras.layers import Dense
from keras import optimizers
from keras.wrappers.scikit_learn import KerasRegressor
from keras.wrappers.scikit_learn import KerasClassifier
from sklearn.datasets import make_classification
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import KFold
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline
from sklearn.model_selection import GridSearchCV
from sklearn.datasets import make_classification

# fix random seed for reproducibility
seed = 500
numpy.random.seed(seed)

# load dataset														
dataframe = pandas.read_csv("yearMSD_new_Train_seed1.csv", sep=',', header=None)
dataset = dataframe.values

# split into input (X) and output (Y) va
X = dataset[:,0:18] #0-17
Y = dataset[:,18]


# define the model
def build_model():
	# create model
    activation='relu'
    init_mode='normal'
    keras.optimizers.Adam(lr=0.0001)
    model = Sequential()
    model.add(Dense(5, input_dim=18, kernel_initializer=init_mode, activation=activation))
    model.add(Dense(15, kernel_initializer=init_mode, activation=activation))
    model.add(Dense(20, kernel_initializer=init_mode, activation=activation))
    model.add(Dense(15, kernel_initializer=init_mode, activation=activation))
    model.add(Dense(10, kernel_initializer=init_mode, activation=activation))
    model.add(Dense(10, kernel_initializer=init_mode, activation=activation))
    model.add(Dense(20, kernel_initializer=init_mode, activation=activation))
    model.add(Dense(1, kernel_initializer=init_mode))
	# Compile model
    model.compile(loss='mean_squared_error', optimizer='adam')
    return model



#what is epoch? ENTIRE dataset is passed forward and backward through the neural network ONCE.
#what is batch_size? the number of examples in one batch
#what is iterations? the number of batches needed to complete one epoch
#number of 
    
nodes = [4,6,8,10,12] # number of nodes in the hidden layer
lrs = [0.0005,0.001,0.0015,0.002,0.0025,0.003,0.0035,0.004,0.0045,0.005] # learning rate, default = 0.001
epochs = 15
batch_size = 3

model = KerasRegressor(build_fn=build_model, epochs=epochs, batch_size=batch_size, verbose=0)
param_grid = dict(nodes=nodes, lr=lrs)
param_grid

grid = GridSearchCV(estimator=model, param_grid=param_grid, n_jobs=1,verbose=0)
grid_result = grid.fit(X, Y)
print(grid.grid_scores_)
print(grid_result)

print("Best: %f using %s" % (grid_result.best_score_, grid_result.best_params_))
means = grid_result.cv_results_['mean_test_score']
stds = grid_result.cv_results_['std_test_score']
params = grid_result.cv_results_['params']
for mean, stdev, param in zip(means, stds, params):
    print("%f (%f) with: %r" % (mean, stdev, param))
    
#run on train data
model = KerasRegressor(build_fn=build_model, epochs=epochs, batch_size=batch_size, verbose=0)
model.fit(X,Y,epochs=15,batch_size=3)
prediction = model.predict(X)

train_error =  numpy.abs(Y - prediction)
mean_error = numpy.mean(train_error)
min_error = numpy.min(train_error)
max_error = numpy.max(train_error)
std_error = numpy.std(train_error)


RMSE = (mean_error)**0.5
print(RMSE)

end = time.time()
print(end - start) 
